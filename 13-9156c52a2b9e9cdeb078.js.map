{"version":3,"sources":["webpack:///./src/components/shared/Button.js","webpack:///./src/apps/tableRoller/parseTable.js","webpack:///./src/apps/tableRoller/TableRoller.js"],"names":["styled_components__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_styles_reset__WEBPACK_IMPORTED_MODULE_1__","_styles_colors__WEBPACK_IMPORTED_MODULE_2__","Button","styled","button","withConfig","displayName","componentId","inputReset","colors","getText","node","textContent","nodeListToArray","nodeList","slice","call","childNodesToArray","parentContainer","childNodes","map","parseTable","tableDom","headers","querySelector","querySelectorAll","bodyRow","zipObject","StyledTableRoller","div","StyledButtonsContainer","RollerButton","StyledResult","StyledResultValue","StyledResultTitle","span","TableRollerButtons","_ref","buttons","rollResult","react_default","a","createElement","_ref2","i","title","dice","additionalFields","key","onClick","TableRollerResult","_ref3","result","_ref3$filterKeys","filterKeys","toPairs","filter","_ref4","indexOf","_ref5","value","TableRoller","state","componentDidMount","table","this","props","document","nextElementSibling","tableData","setState","droll","roll","total","additionalResults","reduce","acc","_ref6","_Object$assign","Object","assign","render","_this2","_this$props","_this$state","filterKeyArray","split","buttonsArray","JSON","parse","length","TableRoller_TableRollerButtons","TableRoller_TableRollerResult","Component"],"mappings":"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","file":"13-9156c52a2b9e9cdeb078.js","sourcesContent":["import styled from 'styled-components';\nimport { inputReset } from '../styles/reset';\nimport * as colors from '../styles/colors';\n\nconst Button = styled.button`\n    ${inputReset}\n\n    padding: 0.25em 0.75em;\n    font-weight: 600;\n    background: ${colors.highlightAlt};\n    color: white;\n\n    border-radius: 3px;\n    cursor: pointer;\n\n    outline: none;\n\n    &: hover {\n        background: ${colors.highlight};\n    }\n`\n\nexport default Button;\n","import { zipObject } from 'lodash';\n\nconst getText = (node) => node.textContent;\nconst nodeListToArray = (nodeList) => [].slice.call(nodeList);\n\nconst childNodesToArray = (parentContainer) => {\n    const ths = nodeListToArray(parentContainer.childNodes);\n    return ths.map(getText);\n};\n\nconst parseTable = (tableDom) => {\n    const headers = childNodesToArray(tableDom.querySelector('thead tr'));\n    const bodyRows = nodeListToArray(tableDom.querySelectorAll('tbody tr')).map(childNodesToArray);\n    return bodyRows.map((bodyRow) => zipObject(headers, bodyRow));\n};\n\nexport default parseTable;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { toPairs } from 'lodash';\nimport droll from 'droll';\n\nimport parseTable from './parseTable';\nimport Button from '../../components/shared/Button';\n\nconst findTable = (markerId) => {\n    const tableMarker = document.querySelector('*[data-table-marker]');\n    return tableMarker.nextElementSibling;\n};\n\nconst StyledTableRoller = styled.div`\n    margin: 2rem 0;\n    border: 1px solid lightgrey;\n`\n\nconst StyledButtonsContainer = styled.div`\n    padding: 0.5rem;\n`\n\nconst RollerButton = styled(Button)`\n    margin-right: 0.5rem;\n`\n\nconst StyledResult = styled.div`\n    padding: 0.5rem;\n\n    border-top: 1px solid lightgrey;\n    background: #eee;\n`\n\nconst StyledResultValue = styled.div`\n    margin-bottom: 0.25rem;\n`\n\nconst StyledResultTitle = styled.span`\n    font-weight: 600;\n    margin-right: 0.5rem;\n`\n\nconst TableRollerButtons = ({ buttons, rollResult }) => (\n    <StyledButtonsContainer>\n        {buttons.map(([title, dice, additionalFields], i) => (\n            <RollerButton key={i} onClick={() => rollResult(dice, additionalFields)}>{title}</RollerButton>\n        ))}\n    </StyledButtonsContainer>\n);\n\nconst TableRollerResult = ({ result, filterKeys = [] }) => (\n    <StyledResult>\n        {toPairs(result)\n            .filter(([key]) => filterKeys.indexOf(key))\n            .map(([key, value], i) => (\n            <StyledResultValue key={i}>\n                <StyledResultTitle>{key}: </StyledResultTitle>\n                <span>{value}</span>\n            </StyledResultValue>\n        ))}\n    </StyledResult>\n);\n\nclass TableRoller extends Component {\n    state = {};\n\n    componentDidMount() {\n        const table = findTable(this.props.table);\n        const tableData = parseTable(table);\n\n        this.setState({ tableData });\n    }\n\n    rollResult(dice, additionalFields) {\n        const { tableData } = this.state;\n\n        const diceRoll = droll.roll(dice);\n\n        const result = tableData[diceRoll.total - 1];\n        const additionalResults = additionalFields ?\n            additionalFields.reduce((acc, [key, roll]) => ({\n                ...acc,\n                [key]: droll.roll(roll).total,\n            }), {}) :\n            {};\n\n        this.setState({\n            result: {\n                ...result,\n                ...additionalResults\n            },\n        });\n    }\n\n    render() {\n        const { filter, buttons } = this.props;\n        const { tableData, result } = this.state;\n\n        if (!tableData) return null;\n\n        const filterKeyArray = filter && filter.split(',');\n        const buttonsArray = buttons && JSON.parse(buttons) || ['Roll', `d${tableData.length}`];\n\n        return (\n            <StyledTableRoller>\n                <TableRollerButtons buttons={buttonsArray} rollResult={(dice, additionalFields) => this.rollResult(dice, additionalFields)} />\n                {result && <TableRollerResult result={result} filterKeys={filterKeyArray} />}\n\n            </StyledTableRoller>\n        );\n    }\n}\n\nexport default TableRoller;\n"],"sourceRoot":""}