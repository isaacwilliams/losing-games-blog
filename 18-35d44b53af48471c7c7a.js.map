{"version":3,"sources":["webpack:///./src/components/shared/Button.js","webpack:///./src/apps/tableRoller/parseTable.js","webpack:///./src/apps/tableRoller/components.js","webpack:///./src/apps/AppErrorBoundry.js","webpack:///./src/apps/tableRoller/TableRoller.js"],"names":["styled_components__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_styles_reset__WEBPACK_IMPORTED_MODULE_1__","_styles_colors__WEBPACK_IMPORTED_MODULE_2__","Button","styled","button","withConfig","displayName","componentId","inputReset","colors","getText","node","textContent","nodeListToArray","nodeList","slice","call","childNodesToArray","parentContainer","childNodes","map","parseTable","tableDom","headers","querySelector","rowsByKey","querySelectorAll","bodyRow","zipObject","tableData","reduce","data","key","i","_Object$assign","Object","assign","row","StyledTableRoller","div","StyledButtonsContainer","RollerButton","RollerLabel","span","StyledResult","StyledResultValue","StyledResultTitle","ErrorContainer","AppErrorBoundary","state","hasError","errorDetails","getDerivedStateFromError","error","render","_this$state","this","react_default","a","createElement","toString","props","children","Component","TableRollerButtons","_ref","buttons","rollResult","_ref2","title","fields","buttonClass","className","onClick","TableRollerResult","_ref3","result","toPairs","_ref4","value","contains","array","indexOf","hasColon","hasCurlyBrace","omitMetaValues","omitBy","_","startsWith","rollFieldValue","_ref5","defaultResult","_splitColon","split","dice","val1","val2","roll","directive","droll","min","rolls","max","total","rollDice","undefined","diceRoll","rollField","_ref7","fieldValue","_ref6","filter","s","part","rolledValue","fieldArray","length","join","iterpolateField","TableRoller","results","componentDidMount","_this$props","_this$props$table","table","allHeaders","allData","forEach","tableId","markerId","document","nextElementSibling","_parseTable","concat","additionalData","JSON","parse","keys","setState","_this$state$tableData","_this$state$headers","fieldsWithDefault","acc","header","resultType","_ref8","defultRoll","mapValues","getResult","console","_this2","_this$state2","buttonsArray","TableRoller_TableRollerButtons","TableRoller_TableRollerResult","__webpack_exports__","AppErrorBoundry","TableRoller_TableRoller"],"mappings":"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","file":"18-35d44b53af48471c7c7a.js","sourcesContent":["import styled from 'styled-components';\nimport { inputReset } from '../styles/reset';\nimport * as colors from '../styles/colors';\n\nconst Button = styled.button`\n    ${inputReset}\n\n    padding: 0.25em 0.75em;\n    font-weight: 600;\n    background: ${colors.highlightAlt};\n    color: white;\n\n    border-radius: 3px;\n    cursor: pointer;\n\n    outline: none;\n\n    &: hover {\n        background: ${colors.highlight};\n    }\n`\n\nexport default Button;\n","import { zipObject } from 'lodash';\n\nconst getText = (node) => node.textContent;\nconst nodeListToArray = (nodeList) => [].slice.call(nodeList);\n\nconst childNodesToArray = (parentContainer) => {\n    const ths = nodeListToArray(parentContainer.childNodes);\n    return ths.map(getText);\n};\n\nconst parseTable = (tableDom) => {\n    const headers = childNodesToArray(tableDom.querySelector('thead tr'));\n    const bodyRows = nodeListToArray(tableDom.querySelectorAll('tbody tr')).map(childNodesToArray);\n\n    const rowsByKey = bodyRows.map((bodyRow) => zipObject(headers, bodyRow));\n\n    const tableData = headers.reduce((data, key, i) => ({\n        ...data,\n        [key]: rowsByKey.map(row => row[key]),\n    }), {});\n\n    return {\n        headers,\n        tableData,\n    };\n};\n\nexport default parseTable;\n","import styled from 'styled-components';\nimport Button from '../../components/shared/Button';\n\nexport const StyledTableRoller = styled.div`\n    margin: 2rem 0;\n    border: 1px solid lightgrey;\n`\nexport const StyledButtonsContainer = styled.div`\n    position: relative;\n    padding: 0.5rem;\n\n    &:after {\n        position: absolute;\n        top: -0.35rem;\n        right: 0.8rem;\n        content: 'âš„';\n        font-size: 2rem;\n        color: grey;\n    }\n`\nexport const RollerButton = styled(Button)`\n    margin-right: 0.5rem;\n\n    &.secondary {\n        background: grey;\n\n        &:hover {\n            background: red;\n        }\n    }\n`\n\nexport const RollerLabel = styled.span`\n    margin-right: 0.5rem;\n    color: #666;\n`\n\nexport const StyledResult = styled.div`\n    padding: 0.5rem;\n\n    border-top: 1px solid lightgrey;\n    background: #eee;\n`\n\nexport const StyledResultValue = styled.div`\n    margin-bottom: 0.25rem;\n`\n\nexport const StyledResultTitle = styled.span`\n    font-weight: 600;\n    margin-right: 0.25rem;\n`\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nexport const ErrorContainer = styled.div`\n    border: 1px solid red;\n    padding: 0.5rem;\n`\n\nclass AppErrorBoundary extends Component {\n    state = { hasError: false, errorDetails: null };\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true, errorDetails: error };\n    }\n\n    render() {\n        const { hasError, errorDetails } = this.state;\n\n        if (hasError) {\n            return (\n                <ErrorContainer>\n                    {errorDetails.toString()}\n                </ErrorContainer>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default AppErrorBoundary;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {\n    toPairs,\n    omit,\n    mapKeys,\n    mapValues,\n    sample,\n    reduce,\n    omitBy,\n    startsWith,\n    min,\n    max,\n} from 'lodash/fp';\n\nimport droll from 'droll';\n\nimport parseTable from './parseTable';\n\nimport {\n    StyledTableRoller,\n    StyledButtonsContainer,\n    RollerButton,\n    RollerLabel,\n    StyledResult,\n    StyledResultValue,\n    StyledResultTitle,\n} from './components';\n\nimport AppErrorBoundary, { ErrorContainer } from '../AppErrorBoundry';\n\nconst TableRollerButtons = ({ buttons, rollResult }) => (\n    <StyledButtonsContainer>\n        {buttons.map(([title, fields], i) => {\n            const buttonClass = fields['~~buttonStyle'];\n            const buttonType = fields['~~buttonType'];\n\n            if (buttonType === 'label') {\n                return (\n                    <RollerLabel className={buttonClass}>{title}</RollerLabel>\n                );\n            }\n\n            return (\n                <RollerButton key={i} onClick={() => rollResult(fields)} className={buttonClass}>{title}</RollerButton>\n            );\n        })}\n    </StyledButtonsContainer>\n);\n\nconst TableRollerResult = ({ result }) => (\n    <StyledResult>\n        {toPairs(result)\n            .map(([key, value], i) => (\n            <StyledResultValue key={i}>\n                <StyledResultTitle>{key}: </StyledResultTitle>\n                <span>{value}</span>\n            </StyledResultValue>\n        ))}\n    </StyledResult>\n);\n\nconst contains = (value) => (array) => array.indexOf(value) > -1;\n\nconst hasPipe = contains('|');\nconst splitPipe = (string) => string.split('|');\n\nconst hasColon = contains(':')\nconst splitColon = (string) => string.split(':');\n\nconst hasCurlyBrace = contains('{');\n\nconst omitMetaValues = omitBy((_, key) => startsWith('~~', key));\n\nconst findTable = (markerId) => {\n    const tableMarker = document.querySelector(`*[data-table-marker=\"${markerId}\"]`);\n    return tableMarker.nextElementSibling;\n};\n\nconst rollDice = (dice, directive) => {\n    const roll = droll.roll(dice);\n\n    switch (directive) {\n        case 'lowest':\n            return min(roll.rolls);\n        case 'highest':\n            return max(roll.rolls);\n        default:\n            return roll.total;\n    }\n}\n\nconst rollFieldValue = ({ defaultResult, tableData, headers }) => (value) => {\n    if (contains(value)(headers)) {\n        return tableData[value][defaultResult];\n    }\n\n    if (hasColon(value)) {\n        const [dice, val1, val2] = splitColon(value);\n        const key = val2 || val1;\n        const directive = val2 ? val1 : undefined;\n\n        const roll = rollDice(dice, directive) - 1;\n        return tableData[key][roll];\n    }\n\n    const diceRoll = droll.roll(value).total;\n    if (diceRoll) return diceRoll.toString();\n\n    return value;\n};\n\nconst iterpolateField = ({ defaultResult, tableData, fields, headers }) => (value) => {\n    const parts = value.split(/{([^}]+)}/g).filter((s) => !!s);\n\n    return parts.map(part => {\n        if (!contains(part)(headers)) {\n            const rolledValue = rollFieldValue({ defaultResult, tableData, headers })(part);\n            if (rolledValue) return rolledValue;\n        };\n\n        const fieldArray = tableData[part];\n        if (!fieldArray) return part;\n\n        const rolledValue = rollFieldValue({ defaultResult, tableData, headers })(`d${fieldArray.length}:${part}`);\n\n        return rolledValue || part;\n    })\n    .join('');\n};\n\nconst rollField = ({ defaultResult, tableData, fields, headers }) => (value) => {\n    const fieldValue = rollFieldValue({ defaultResult, tableData, headers })(value);\n\n    if (fieldValue && hasCurlyBrace(fieldValue)) {\n        return iterpolateField({ defaultResult, tableData, fields, headers })(fieldValue);\n    }\n\n    return fieldValue;\n};\n\nconst getResult = ({ tableData, fields, headers }) => {\n    const defultRoll = fields['~~roll'] || `d${tableData[headers[0]].length}`;\n    const defaultResult = droll.roll(defultRoll).total - 1;\n\n    return mapValues(rollField({ defaultResult, tableData, fields, headers }))(omitMetaValues(fields));\n};\n\nclass TableRoller extends Component {\n    state = { results: [] };\n\n    componentDidMount() {\n        const { table = '', data } = this.props;\n\n        let allHeaders = [];\n        let allData = {};\n\n        const tablesIds = table.split(',');\n        tablesIds.forEach((tableId) => {\n            const tableDom = findTable(tableId);\n            const { headers, tableData } = parseTable(tableDom);\n\n            allHeaders = [...allHeaders, ...headers];\n            allData = {...allData, ...tableData};\n        })\n\n        const additionalData = data && JSON.parse(data) || {};\n\n        allHeaders = [...allHeaders, ...Object.keys(additionalData)];\n        allData = {...allData, ...additionalData};\n\n        this.setState({\n            headers: allHeaders,\n            tableData: allData,\n        });\n    }\n\n    rollResult(fields) {\n        try {\n            const { tableData = {}, headers = [], results } = this.state;\n\n            const fieldsWithDefault = fields || headers.reduce((acc, header) => ({ ...acc, [header]: header }), {});\n\n            const resultType = fields['~~resultType'] || 'replace';\n            const result = getResult({ tableData, headers, fields: fieldsWithDefault });\n\n            this.setState({\n                results: resultType === 'append' ?\n                    [...results, result] :\n                    [result],\n            });\n        } catch (error) {\n            console.error(error);\n            this.setState({ error });\n        }\n    }\n\n    render() {\n        const { buttons } = this.props;\n        const { tableData, results, error } = this.state;\n\n        if (error) return <ErrorContainer>{error.toString()}</ErrorContainer>;\n\n        const buttonsArray = buttons && JSON.parse(buttons);\n\n        return (\n            <StyledTableRoller>\n                <TableRollerButtons buttons={buttonsArray} rollResult={(fields) => this.rollResult(fields)} />\n                {results.map((result, i) => (\n                    <TableRollerResult key={i} result={result} />\n                ))}\n            </StyledTableRoller>\n        );\n    }\n}\n\nexport default (props) => <AppErrorBoundary><TableRoller {...props} /></AppErrorBoundary>;\n"],"sourceRoot":""}