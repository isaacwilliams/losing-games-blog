{"version":3,"sources":["webpack:///./src/apps/tableRoller/parseTable.js","webpack:///./src/apps/tableRoller/components.js","webpack:///./src/apps/AppErrorBoundry.js","webpack:///./src/apps/tableRoller/TableRoller.js","webpack:///./src/components/shared/Button.js"],"names":["getText","node","textContent","nodeListToArray","nodeList","slice","call","childNodesToArray","parentContainer","childNodes","map","parseTable","tableDom","headers","querySelector","rowsByKey","querySelectorAll","bodyRow","zipObject","tableData","reduce","data","key","i","row","StyledTableRoller","styled","div","StyledButtonsContainer","RollerButton","Button","RollerLabel","span","StyledResult","StyledResultValue","StyledResultTitle","StyledResultDivider","ErrorContainer","AppErrorBoundary","state","hasError","errorDetails","getDerivedStateFromError","error","render","this","toString","props","children","Component","TableRollerButtons","buttons","rollResult","title","fields","buttonClass","className","onClick","TableRollerResult","result","toPairs","value","contains","array","indexOf","hasColon","hasCurlyBrace","omitMetaValues","omitBy","_","startsWith","rollFieldValue","defaultResult","split","dice","val1","val2","roll","directive","droll","min","rolls","max","total","rollDice","undefined","diceRoll","rollField","fieldValue","filter","s","part","rolledValue","fieldArray","length","join","iterpolateField","TableRoller","results","componentDidMount","table","allHeaders","allData","forEach","tableId","markerId","document","nextElementSibling","additionalData","JSON","parse","Object","keys","setState","fieldsWithDefault","acc","header","resultType","defultRoll","mapValues","getResult","console","buttonsArray","button","inputReset","colors"],"mappings":"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","file":"22-7cc8789b4aef90bafd4f.js","sourcesContent":["import { zipObject } from 'lodash';\n\nconst getText = (node) => node.textContent;\nconst nodeListToArray = (nodeList) => [].slice.call(nodeList);\n\nconst childNodesToArray = (parentContainer) => {\n    const ths = nodeListToArray(parentContainer.childNodes);\n    return ths.map(getText);\n};\n\nconst parseTable = (tableDom) => {\n    const headers = childNodesToArray(tableDom.querySelector('thead tr'));\n    const bodyRows = nodeListToArray(tableDom.querySelectorAll('tbody tr')).map(childNodesToArray);\n\n    const rowsByKey = bodyRows.map((bodyRow) => zipObject(headers, bodyRow));\n\n    const tableData = headers.reduce((data, key, i) => ({\n        ...data,\n        [key]: rowsByKey.map(row => row[key]),\n    }), {});\n\n    return {\n        headers,\n        tableData,\n    };\n};\n\nexport default parseTable;\n","import styled from 'styled-components';\nimport Button from '../../components/shared/Button';\n\nexport const StyledTableRoller = styled.div`\n    margin: 2rem 0;\n    border: 1px solid lightgrey;\n`\nexport const StyledButtonsContainer = styled.div`\n    position: relative;\n    padding: 0.5rem;\n\n    &:after {\n        position: absolute;\n        top: -0.35rem;\n        right: 0.8rem;\n        content: 'âš„';\n        font-size: 2rem;\n        color: grey;\n    }\n`\nexport const RollerButton = styled(Button)`\n    margin-right: 0.5rem;\n\n    &.secondary {\n        background: grey;\n\n        &:hover {\n            background: red;\n        }\n    }\n`\n\nexport const RollerLabel = styled.span`\n    margin-right: 0.5rem;\n    color: #666;\n`\n\nexport const StyledResult = styled.div`\n    padding: 0.5rem;\n\n    border-top: 1px solid lightgrey;\n    background: #eee;\n`\n\nexport const StyledResultValue = styled.div`\n    margin-bottom: 0.25rem;\n`\n\nexport const StyledResultTitle = styled.span`\n    font-weight: 600;\n    margin-right: 0.25rem;\n`\n\nexport const StyledResultDivider = styled.div`\n    margin-top: 0.7rem;\n    margin-bottom: 0.5rem;\n    border-top: 1px solid lightgrey;\n`\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nexport const ErrorContainer = styled.div`\n    border: 1px solid red;\n    padding: 0.5rem;\n`\n\nclass AppErrorBoundary extends Component {\n    state = { hasError: false, errorDetails: null };\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true, errorDetails: error };\n    }\n\n    render() {\n        const { hasError, errorDetails } = this.state;\n\n        if (hasError) {\n            return (\n                <ErrorContainer>\n                    {errorDetails.toString()}\n                </ErrorContainer>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default AppErrorBoundary;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {\n    toPairs,\n    omit,\n    mapKeys,\n    mapValues,\n    sample,\n    reduce,\n    omitBy,\n    startsWith,\n    min,\n    max,\n} from 'lodash/fp';\n\nimport droll from 'droll';\n\nimport parseTable from './parseTable';\n\nimport {\n    StyledTableRoller,\n    StyledButtonsContainer,\n    RollerButton,\n    RollerLabel,\n    StyledResult,\n    StyledResultValue,\n    StyledResultTitle,\n    StyledResultDivider,\n} from './components';\n\nimport AppErrorBoundary, { ErrorContainer } from '../AppErrorBoundry';\n\nconst TableRollerButtons = ({ buttons, rollResult }) => (\n    <StyledButtonsContainer>\n        {buttons.map(([title, fields], i) => {\n            const buttonClass = fields['~~buttonStyle'];\n            const buttonType = fields['~~buttonType'];\n\n            if (buttonType === 'label') {\n                return (\n                    <RollerLabel className={buttonClass}>{title}</RollerLabel>\n                );\n            }\n\n            return (\n                <RollerButton key={i} onClick={() => rollResult(fields)} className={buttonClass}>{title}</RollerButton>\n            );\n        })}\n    </StyledButtonsContainer>\n);\n\nconst TableRollerResult = ({ result }) => (\n    <StyledResult>\n        {toPairs(result).map(([key, value], i) => {\n            if (value === 'DIVIDER') return <StyledResultDivider />;\n\n            return (\n                <StyledResultValue key={i}>\n                    <StyledResultTitle>{key}: </StyledResultTitle>\n                    <span>{value}</span>\n                </StyledResultValue>\n            );\n        })}\n    </StyledResult>\n);\n\nconst contains = (value) => (array) => array.indexOf(value) > -1;\n\nconst hasPipe = contains('|');\nconst splitPipe = (string) => string.split('|');\n\nconst hasColon = contains(':')\nconst splitColon = (string) => string.split(':');\n\nconst hasCurlyBrace = contains('{');\n\nconst omitMetaValues = omitBy((_, key) => startsWith('~~', key));\n\nconst findTable = (markerId) => {\n    const tableMarker = document.querySelector(`*[data-table-marker=\"${markerId}\"]`);\n    return tableMarker.nextElementSibling;\n};\n\nconst rollDice = (dice, directive) => {\n    const roll = droll.roll(dice);\n\n    switch (directive) {\n        case 'lowest':\n            return min(roll.rolls);\n        case 'highest':\n            return max(roll.rolls);\n        default:\n            return roll.total;\n    }\n}\n\nconst rollFieldValue = ({ defaultResult, tableData, headers }) => (value) => {\n    if (contains(value)(headers)) {\n        return tableData[value][defaultResult];\n    }\n\n    if (hasColon(value)) {\n        const [dice, val1, val2] = splitColon(value);\n        const key = val2 || val1;\n        const directive = val2 ? val1 : undefined;\n\n        const roll = rollDice(dice, directive) - 1;\n        return tableData[key][roll];\n    }\n\n    const diceRoll = droll.roll(value).total;\n    if (diceRoll) return diceRoll.toString();\n\n    return value;\n};\n\nconst iterpolateField = ({ defaultResult, tableData, fields, headers }) => (value) => {\n    const parts = value.split(/{([^}]+)}/g).filter((s) => !!s);\n\n    return parts.map(part => {\n        if (!contains(part)(headers)) {\n            const rolledValue = rollFieldValue({ defaultResult, tableData, headers })(part);\n            if (rolledValue) return rolledValue;\n        };\n\n        const fieldArray = tableData[part];\n        if (!fieldArray) return part;\n\n        const rolledValue = rollFieldValue({ defaultResult, tableData, headers })(`d${fieldArray.length}:${part}`);\n\n        return rolledValue || part;\n    })\n    .join('');\n};\n\nconst rollField = ({ defaultResult, tableData, fields, headers }) => (value) => {\n    const fieldValue = rollFieldValue({ defaultResult, tableData, headers })(value);\n\n    if (fieldValue && hasCurlyBrace(fieldValue)) {\n        return iterpolateField({ defaultResult, tableData, fields, headers })(fieldValue);\n    }\n\n    return fieldValue;\n};\n\nconst getResult = ({ tableData, fields, headers }) => {\n    const defultRoll = fields['~~roll'] || `d${tableData[headers[0]].length}`;\n    const defaultResult = droll.roll(defultRoll).total - 1;\n\n    return mapValues(rollField({ defaultResult, tableData, fields, headers }))(omitMetaValues(fields));\n};\n\nclass TableRoller extends Component {\n    state = { results: [] };\n\n    componentDidMount() {\n        const { table = '', data } = this.props;\n\n        let allHeaders = [];\n        let allData = {};\n\n        const tablesIds = table.split(',');\n        tablesIds.forEach((tableId) => {\n            const tableDom = findTable(tableId);\n            const { headers, tableData } = parseTable(tableDom);\n\n            allHeaders = [...allHeaders, ...headers];\n            allData = {...allData, ...tableData};\n        })\n\n        const additionalData = data && JSON.parse(data) || {};\n\n        allHeaders = [...allHeaders, ...Object.keys(additionalData)];\n        allData = {...allData, ...additionalData};\n\n        this.setState({\n            headers: allHeaders,\n            tableData: allData,\n        });\n    }\n\n    rollResult(fields) {\n        try {\n            const { tableData = {}, headers = [], results } = this.state;\n\n            const fieldsWithDefault = fields || headers.reduce((acc, header) => ({ ...acc, [header]: header }), {});\n\n            const resultType = fields['~~resultType'] || 'replace';\n            const result = getResult({ tableData, headers, fields: fieldsWithDefault });\n\n            this.setState({\n                results: resultType === 'append' ?\n                    [...results, result] :\n                    [result],\n            });\n        } catch (error) {\n            console.error(error);\n            this.setState({ error });\n        }\n    }\n\n    render() {\n        const { buttons } = this.props;\n        const { tableData, results, error } = this.state;\n\n        if (error) return <ErrorContainer>{error.toString()}</ErrorContainer>;\n\n        const buttonsArray = buttons && JSON.parse(buttons);\n\n        return (\n            <StyledTableRoller>\n                <TableRollerButtons buttons={buttonsArray} rollResult={(fields) => this.rollResult(fields)} />\n                {results.map((result, i) => (\n                    <TableRollerResult key={i} result={result} />\n                ))}\n            </StyledTableRoller>\n        );\n    }\n}\n\nexport default (props) => <AppErrorBoundary><TableRoller {...props} /></AppErrorBoundary>;\n","import styled from 'styled-components';\nimport { inputReset } from '../styles/reset';\nimport * as colors from '../styles/colors';\n\nconst Button = styled.button`\n    ${inputReset}\n\n    padding: 0.25em 0.75em;\n    font-weight: 600;\n    background: ${colors.highlightAlt};\n    color: white;\n\n    border-radius: 3px;\n    cursor: pointer;\n\n    outline: none;\n\n    &: hover {\n        background: ${colors.highlight};\n    }\n`\n\nexport default Button;\n"],"sourceRoot":""}